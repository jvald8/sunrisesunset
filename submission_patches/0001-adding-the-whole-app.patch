From c47c22fa0792a06500ecea540e86c4b32588176c Mon Sep 17 00:00:00 2001
From: Jon Ringvald <jvald8@gmail.com>
Date: Wed, 5 Aug 2015 17:33:10 -0700
Subject: [PATCH 1/4] adding the whole app

---
 .gitignore                |   2 +
 bower.json                |  22 ++++++
 package.json              |  23 +++++++
 public/index.html         | 121 +++++++++++++++++++++++++++++++++
 public/indexController.js | 168 ++++++++++++++++++++++++++++++++++++++++++++++
 server.js                 |   8 +++
 todo.md                   |   3 +
 7 files changed, 347 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 bower.json
 create mode 100644 package.json
 create mode 100644 public/index.html
 create mode 100644 public/indexController.js
 create mode 100644 server.js
 create mode 100644 todo.md

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..a088b6f
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,2 @@
+node_modules
+bower_components
diff --git a/bower.json b/bower.json
new file mode 100644
index 0000000..9383ca4
--- /dev/null
+++ b/bower.json
@@ -0,0 +1,22 @@
+{
+  "name": "js_codechallenge",
+  "version": "0.0.0",
+  "homepage": "https://github.com/renewablefunding/js_codechallenge",
+  "authors": [
+    "Jon Ringvald <jvald8@gmail.com>"
+  ],
+  "moduleType": [
+    "node"
+  ],
+  "license": "MIT",
+  "ignore": [
+    "**/.*",
+    "node_modules",
+    "bower_components",
+    "test",
+    "tests"
+  ],
+  "dependencies": {
+    "angular-bootstrap": "~0.13.2"
+  }
+}
diff --git a/package.json b/package.json
new file mode 100644
index 0000000..b5d5b7f
--- /dev/null
+++ b/package.json
@@ -0,0 +1,23 @@
+{
+  "name": "js_codechallenge",
+  "version": "1.0.0",
+  "description": "Renewable Funding: jsCodeChallenge =================================",
+  "main": "indexController.js",
+  "scripts": {
+    "test": "echo \"Error: no test specified\" && exit 1",
+    "start": "node server.js"
+  },
+  "repository": {
+    "type": "git",
+    "url": "https://github.com/renewablefunding/js_codechallenge.git"
+  },
+  "author": "",
+  "license": "ISC",
+  "bugs": {
+    "url": "https://github.com/renewablefunding/js_codechallenge/issues"
+  },
+  "homepage": "https://github.com/renewablefunding/js_codechallenge",
+  "dependencies": {
+    "express": "^4.13.3"
+  }
+}
diff --git a/public/index.html b/public/index.html
new file mode 100644
index 0000000..f2485ab
--- /dev/null
+++ b/public/index.html
@@ -0,0 +1,121 @@
+<!DOCTYPE html>
+<html lang="en" ng-app='weather'>
+  <head>
+    <meta name="viewport" content="width=device-width, initial-scale=1">
+    <title>7 Day Weather!</title>
+    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
+    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
+    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.tablesorter/2.22.3/js/jquery.tablesorter.min.js"></script>
+    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.min.js"></script>
+    <script src="./bower_components/angular-bootstrap/ui-bootstrap.js"></script>
+    <script src="./bower_components/angular-bootstrap/ui-bootstrap-tpls.js"></script>
+    <script src="https://maps.googleapis.com/maps/api/js?v=3.exp&signed_in=true"></script>
+    <script src='./indexController.js' type='text/javascript'></script>
+    <meta name="viewport" content="width=device-width, initial-scale=1">
+  </head>
+
+  <body ng-controller='WeatherController'>
+
+  <h4>Pick your dates:</h4>
+    <div class="row">
+        <div class="col-md-6">
+            <p class="input-group">
+              <input class="text-center" type="date" class="form-control" datepicker-popup ng-model="firstDate" is-open="opened" min-date="minDate" max-date="'2020-06-22'" datepicker-options="dateOptions" ng-required="true" close-text="Close" />
+              <!--<span class="input-group-btn">
+                <button type="button" class="btn btn-default" ng-click="open($event)"><i class="glyphicon glyphicon-calendar"></i></button>
+              </span>-->
+            </p>
+        </div>
+
+        <div class="col-md-6">
+            <p class="input-group">
+              <input class="text-center" type="date" class="form-control" datepicker-popup ng-model="secondDate" is-open="opened" min-date="minDate" max-date="'2020-06-22'" datepicker-options="dateOptions" ng-required="true" close-text="Close"  />
+              <!--<span class="input-group-btn">
+                <button type="button" class="btn btn-default" ng-click="open($event)"><i class="glyphicon glyphicon-calendar"></i></button>
+              </span>-->
+            </p>
+        </div>
+    </div>
+
+
+    <div id='panel'>
+      <div> <h4>Enter an Address:</h4>
+        <p class='input-group'>
+          <input class="form-control" id="address" type="textbox" value="Enter an address" ng-model='address' ng-required='true'>
+          <br>
+          <div>
+              <button type="button" class="btn btn-default" ng-click="fetchInfo(address, firstDate, secondDate)"><i class="glyphicon glyphicon-plus"> No whammy, no whammy, BIG MONEY!!!</i></button>
+          </div>
+        </p>
+      </div>
+    </div>
+
+    <br>
+
+    <div class="row">
+
+    <!-- Day listing -->
+      <div class="col-lg-12">
+
+
+        <div class="widget-header" ng-show="showDays">
+          <div class="pull-right"><input type="text" class="form-control input-sm" ng-model="query" placeholder='Filter by date'></div>
+        </div>
+
+        <div class="table-responsive" ng-show="showDays">
+          <table class="table">
+            <thead>
+              <tr>
+                <th class="text-center" ng-click="order('date')">Date</th>
+                <th ng-click="order('data.results.sunrise')">Sunrise Time </th>
+                <th ng-click="order('data.results.sunset')">Sunset Time</th>
+                <th ng-click="order('data.results.day_length')">Day Length</th>
+              </tr>
+            </thead>
+            <tbody>
+              <tr ng-repeat='day in dayData | filter:query | orderBy:predicate:reverse' ng-click='goToDay(day)' >
+                <td class="text-center">{{day.date}}</td>
+                <td>{{day.data.results.sunrise}}</td>
+                <td>{{day.data.results.sunset}}</td>
+                <td>{{day.data.results.day_length}}</td>
+              </tr>
+            </tbody>
+          </table>
+        </div>
+
+
+
+        <div class="table-responsive" ng-show="showOneDay">
+          <table class="table" ng-click='goToDay(null)'>
+            <thead>
+              <tr>
+                <th class="text-center">Date</th>
+                <th>Sunrise Time</th>
+                <th>Sunset Time</th>
+                <th>Day Length</th>
+                <th>Solar Noon</th>
+                <th>Civil Twilight Begins</th>
+                <th>Civil Twilight Ends</th>
+                <th>rfNautical Afternoon Length</th>
+              </tr>
+            </thead>
+            <tbody>
+              <tr>
+                <td class="text-center">{{currentDay.date}}</td>
+                <td>{{currentDay.data.results.sunrise}}</td>
+                <td>{{currentDay.data.results.sunset}}</td>
+                <td>{{currentDay.data.results.day_length}}</td>
+                <td>{{currentDay.data.results.solar_noon}}</td>
+                <td>{{currentDay.data.results.civil_twilight_begin}}</td>
+                <td>{{currentDay.data.results.civil_twilight_end}}</td>
+                <td>{{currentDay.rfNauticalAfternoon}}</td>
+              </tr>
+            </tbody>
+          </table>
+        </div>
+
+      </div>
+    </div>
+
+  </body>
+</html>
diff --git a/public/indexController.js b/public/indexController.js
new file mode 100644
index 0000000..d0c909f
--- /dev/null
+++ b/public/indexController.js
@@ -0,0 +1,168 @@
+
+
+angular.module('weather', ['ui.bootstrap'])
+.controller('WeatherController', function($scope, $http) {
+  // toggle defaults
+
+  $scope.firstDate = '';
+  $scope.secondDate = '';
+
+  $scope.millisecondsInADay = 86400000;
+
+  ($scope.today = function() {
+    $scope.secondDate = new Date();
+  })();
+
+  ($scope.lastWeek = function() {
+    $scope.firstDate = new Date(Date.parse($scope.secondDate) - ($scope.millisecondsInADay * 6));
+  })();
+
+  $scope.dayData = [];
+
+  $scope.dateRange = [];
+
+  $scope.getDateRange =  function(firstDate, secondDate){
+
+    var days = Math.round((secondDate - firstDate)/$scope.millisecondsInADay);
+
+    for(var i = 0; i <= days; i++) {
+      var newDate = new Date(Date.parse(firstDate) + ($scope.millisecondsInADay * (i))).toFormattedString();
+      $scope.dateRange.push(newDate);
+    }
+
+  }
+
+  // init geocoder
+  $scope.geocoder = new google.maps.Geocoder();
+
+  // default is my address
+  $scope.address = '3580 SE Tibbets Rd.';
+
+  $scope.latAndLong = {};
+
+  // getting and setting the longitudes and latitudes.
+  $scope.fetchInfo = function(address, firstDate, secondDate) {
+    $scope.geocoder.geocode({'address':$scope.address}, function(results, status) {
+      $scope.latAndLong.longitude = results[0].geometry.location.G;
+      $scope.latAndLong.latitude = results[0].geometry.location.K;
+
+      $scope.getDateRange(firstDate, secondDate);
+
+      var dateRange = $scope.dateRange;
+
+      $scope.dayData = [];
+
+      for(var i = 0; i < dateRange.length; i++) {
+        var url = 'http://api.sunrise-sunset.org/json?lat=' + $scope.latAndLong.latitude + '&lng=' + $scope.latAndLong.longitude + '&date='+ $scope.dateRange[i] +'&callback=JSON_CALLBACK';
+        var date = dateRange[i];
+        $scope.getDay(url, date);
+      }
+
+      $scope.dateRange = [];
+    })
+  };
+
+
+  $scope.getDay = function(url, date) {
+    $http.jsonp(url)
+    .success(function(data, status, headers, config) {
+      var nautical_twilight_end = data.results.nautical_twilight_end;
+      var solar_noon = data.results.solar_noon;
+
+      var rfNauticalAfternoon = getTimeDifference(solar_noon,nautical_twilight_end)
+
+      $scope.dayData.push({data: data, date: date, rfNauticalAfternoon: rfNauticalAfternoon})
+    })
+    .error(function(data, status, headers, config) {
+      console.log('theres been an error calling /days')
+    })
+  }
+
+  // instantiate with a past week of stuff
+  $scope.fetchInfo($scope.address, $scope.firstDate, $scope.secondDate);
+
+  //toggle function
+  $scope.showDays = true;
+  $scope.showOneDay = false;
+
+  $scope.toggleDays = function() {
+    $scope.showDays = !$scope.showDays;
+    $scope.showOneDay = !$scope.showOneDay;
+  }
+
+  $scope.getCurrentDay = function(day) {
+    $scope.currentDay = day;
+
+  }
+
+  $scope.goToDay = function(day) {
+    $scope.getCurrentDay(day);
+    $scope.toggleDays();
+  }
+
+  // table sorting!!!
+  $scope.predicate = 'date';
+  $scope.reverse = false;
+  $scope.order = function(predicate) {
+      $scope.reverse = ($scope.predicate === predicate) ? !$scope.reverse : false;
+      $scope.predicate = predicate;
+  };
+})
+
+// modifying object prototypes to get formatted dates.
+
+String.prototype.padLeft = function (length, character) {
+    return new Array(length - this.length + 1).join(character || ' ') + this;
+};
+
+Date.prototype.toFormattedString = function () {
+    return [String(this.getMonth()+1).padLeft(2, '0'),
+            String(this.getDate()).padLeft(2, '0'),
+            String(this.getFullYear()).substr(2, 2)].join("/");
+};
+
+function getSecondsElapsed(timeString) {
+  var indexOfFirstColon = timeString.indexOf(':', 0);
+  var indexOfSecondColon = timeString.indexOf(':', indexOfFirstColon + 1);
+  var indexOfFirstSpace = timeString.indexOf(' ', 0);
+
+  var hours = parseInt(timeString.substring(0, indexOfFirstColon));
+  var minutes = parseInt(timeString.substring(indexOfFirstColon + 1, indexOfSecondColon))
+  var seconds = parseInt(timeString.substring(indexOfSecondColon + 1, indexOfFirstSpace))
+
+  var secondElapsed = seconds + (minutes * 60) + (hours * 60 * 60);
+
+  var secondsIn12Hours = 12 * 60 * 60;
+
+  if(timeString.substring(timeString.length - 2, timeString.length) === 'PM') {
+    secondElapsed += secondsIn12Hours;
+  }
+  return secondElapsed;
+}
+
+function getTimeDifference(time1, time2) {
+  var seconds = Math.abs(getSecondsElapsed(time2) - getSecondsElapsed(time1));
+  var hours = Math.floor(seconds/3600);
+  var seconds = seconds % 3600;
+  var minutes = Math.floor(seconds/60);
+  var seconds = seconds % 60;
+
+  if(hours < 10) {
+    hours = '0' + hours;
+  }
+
+  if(minutes < 10) {
+    minutes = '0' + minutes;
+  }
+
+  if(seconds < 10) {
+    seconds = '0' + seconds;
+  }
+
+  var result = hours + ':' + minutes + ':' + seconds;
+
+  return result;
+
+}
+
+
diff --git a/server.js b/server.js
new file mode 100644
index 0000000..cbca158
--- /dev/null
+++ b/server.js
@@ -0,0 +1,8 @@
+var express = require('express'),
+app = express();
+
+app.use(express.static('public'));
+
+app.listen(process.env.PORT || 3001, function() {
+  console.log('server started on 3001')
+})
diff --git a/todo.md b/todo.md
new file mode 100644
index 0000000..dd0ff49
--- /dev/null
+++ b/todo.md
@@ -0,0 +1,3 @@
+- Open issues:
+-- add a bit of testing
+
-- 
2.3.6

